emission.df
source('~/.active-rstudio-document', echo=TRUE)
emission.df
chimere.area.km2
emep.area.km2
sqrt(1600)
emission.df <- {}
for (precursor in c('NOx', 'PPM')) {
chimere.area.emis.tot <- 0
emep.area.emis.tot <- 0
for (snap in 1:10) {
chimere.emis.raster <- raster(chimere.emis, varname = precursor, band = snap)
emep.emis.raster <- raster(emep.emis, varname = precursor, band = snap)
# calculate emissions over the area
chimere.area.emis.tot <- chimere.area.emis.tot + sum(values(chimere.emis.raster * chimere.surf.raster * chimere.area.raster / 100))
emep.area.emis.tot <- emep.area.emis.tot + sum(values(emep.emis.raster * emep.surf.raster * emep.area.raster / 100)) / 1e9
}
emission.df <- rbind(emission.df,
data.frame(model = c('emep', 'chimere'),
precursor = rep(precursor, 2),
emission_Mg = c(emep.area.emis.tot, chimere.area.emis.tot)))
}
emission.df
# Compare weighting functions of SHERPA Emep and Chimere
library(raster)
sr.emep.nc <- 'O:/Integrated_assessment/SHERPA/20170904_emep_totalEmis/3_source_receptors/SR_SURF_ug_PM25_rh50__totalEmis.nc'
sr.chimere.nc <- 'O:/Integrated_assessment/SHERPA/20170322_v18_SrrResults_PotencyBased/3_source_receptors/SR_PM25_Y_20170322_potencyBased.nc'
# Order_Pollutant = "NOx, NMVOC, NH3, PPM, SOx"
pol.list <- c("NOx", "NMVOC", "NH3", "PPM", "SOx")
i.pol <- 4
for (i.pol in 1:5) {
pollutant <- pol.list[i.pol]
#
emep.alpha.pol <- raster(sr.emep.nc, varname = 'alpha', band = i.pol)
extent(emep.alpha.pol) <- extent(c(-30, 90, 30, 82))
chimere.alpha.pol <- raster(sr.chimere.nc, varname = 'alpha', band = i.pol)
extent(chimere.alpha.pol) <- extent(c(-10.5, 37.5, 34, 62))
emep.alpha.pol.resampled <- resample(emep.alpha.pol, chimere.alpha.pol, method = "bilinear")
smoothScatter(values(emep.alpha.pol.resampled), values(chimere.alpha.pol))
lm.alpha <- lm(data = data.frame(emep.alpha = values(emep.alpha.pol.resampled),
chimere.alpha = values(chimere.alpha.pol)),
formula = emep.alpha ~ chimere.alpha)
summary(lm.alpha)
plot((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
hist(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
mean(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100, na.rm = TRUE)
plot(emep.alpha.pol)
plot(chimere.alpha.pol)
plot(emep.alpha.pol.resampled)
}
emep.alpha <- raster(sr.emep.nc, varname = 'alpha', band = 1)
plot(emep.alpha)
i.pol <- 4
pollutant <- pol.list[i.pol]
#
emep.alpha.pol <- raster(sr.emep.nc, varname = 'alpha', band = i.pol)
extent(emep.alpha.pol) <- extent(c(-30, 90, 30, 82))
chimere.alpha.pol <- raster(sr.chimere.nc, varname = 'alpha', band = i.pol)
extent(chimere.alpha.pol) <- extent(c(-10.5, 37.5, 34, 62))
emep.alpha.pol.resampled <- resample(emep.alpha.pol, chimere.alpha.pol, method = "bilinear")
smoothScatter(values(emep.alpha.pol.resampled), values(chimere.alpha.pol))
lm.alpha <- lm(data = data.frame(emep.alpha = values(emep.alpha.pol.resampled),
chimere.alpha = values(chimere.alpha.pol)),
formula = emep.alpha ~ chimere.alpha)
summary(lm.alpha)
plot((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
hist(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
mean(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100, na.rm = TRUE)
smoothScatter(values(emep.alpha.pol.resampled), values(chimere.alpha.pol))
summary(lm.alpha)
?plot
range((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
brks <- seq(from = -100, to = 350, by = 25)
brks <- seq(from = -100, to = 350, by = 25)
cols <- col=colorRampPalette(c("red", "white", "blue"))(255)
cols <- colorRampPalette(c("red", "white", "blue"))(255)
plot((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100, col = cols, breaks = brks)
brks <- seq(from = -100, to = 350, by = 50)
cols <- colorRampPalette(c("red", "white", "blue"))(255)
plot((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100, col = cols, breaks = brks)
plot((emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
hist(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100)
mean(values(emep.alpha.pol.resampled / chimere.alpha.pol - 1) * 100, na.rm = TRUE)
summary(lm.alpha)
smoothScatter(values(emep.alpha.pol.resampled), values(chimere.alpha.pol))
(120+7.61)*2
2/1.5
(2/1.5)^2
20000/300000
112*10*4*5
112*10*4*2
5200/(112*5*10*4)
25/365
1-25/365
13000/(112*5*10*4)
2e9/0.5e6
lons < seq(5, 6, 0.1)
lons <- seq(5, 6, 0.1)
lons
round(lons / 0.5) * 0.5
round((lons - 0.5 / 2) / 0.5) * 0.5
round((lons - 0.5 / 2) / 0.5) * 0.5 + 0.5/2
lons_rounded <- round((lons - 0.5 / 2) / 0.5) * 0.5 + 0.5/2
lons <- seq(5, 7, 0.1)
lons_rounded <- round((lons - 0.5 / 2) / 0.5) * 0.5 + 0.5/2
data.frame(lons, lons_rounded)
plot(lons, lons_rounded)
lons <- seq(5, 7, 0.01)
lons_rounded <- round((lons - 0.5 / 2) / 0.5) * 0.5 + 0.5/2
plot(lons, lons_rounded)
# convert to coordinates of a cell into the name of the Kernel
coords2kernelfilename <- function(lat.area, lon.area, dlat, dlon) {
# lat.area: latitude of the centre of the study area
# lon.area: longitude of the centre of the study area
# dlat: resolution of the kernel grid in N-S direction
# dlon: resolution of the kernel grid in W-E direction
# round the coordinates of the study area centre to the closest grid cell centre
lat.grid <- round((lat.area - dlat / 2) / dlat) * dlat + dlat / 2
lon.grid <- round((lon.area - dlon / 2) / dlon) * dlon + dlon / 2
# convert lat or lon to string with 3 positions after the comma,
# then convert it to a string of 6 characters
# and finally convert eventual leading white spaces in zeros
lat.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", lat.grid)))
lon.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", abs(lon.grid))))
if (lon < 0) {
# if the longitude is negative use 'W' (West)
kernelfilename <- paste0('SK_N', lat.str, 'W', lon.str, '.txt')
} else {
# if the longitude is positve use 'E' (East)
kernelfilename <- paste0('SK_N', lat.str, 'E', lon.str, '.txt')
}
return(data.frame(lat.grid, lon.grid, kernelfilename)
}
# convert to coordinates of a cell into the name of the Kernel
coords2kernelfilename <- function(lat.area, lon.area, dlat, dlon) {
# lat.area: latitude of the centre of the study area
# lon.area: longitude of the centre of the study area
# dlat: resolution of the kernel grid in N-S direction
# dlon: resolution of the kernel grid in W-E direction
# round the coordinates of the study area centre to the closest grid cell centre
lat.grid <- round((lat.area - dlat / 2) / dlat) * dlat + dlat / 2
lon.grid <- round((lon.area - dlon / 2) / dlon) * dlon + dlon / 2
# convert lat or lon to string with 3 positions after the comma,
# then convert it to a string of 6 characters
# and finally convert eventual leading white spaces in zeros
lat.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", lat.grid)))
lon.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", abs(lon.grid))))
if (lon < 0) {
# if the longitude is negative use 'W' (West)
kernelfilename <- paste0('SK_N', lat.str, 'W', lon.str, '.txt')
} else {
# if the longitude is positve use 'E' (East)
kernelfilename <- paste0('SK_N', lat.str, 'E', lon.str, '.txt')
}
return(data.frame(lat.grid, lon.grid, kernelfilename))
}
coords2kernelfilename(50.01, 4.9, 0.25, 0.5)
# convert to coordinates of a cell into the name of the Kernel
coords2kernelfilename <- function(lat.area, lon.area, dlat, dlon) {
# lat.area: latitude of the centre of the study area
# lon.area: longitude of the centre of the study area
# dlat: resolution of the kernel grid in N-S direction
# dlon: resolution of the kernel grid in W-E direction
# round the coordinates of the study area centre to the closest grid cell centre
lat.grid <- round((lat.area - dlat / 2) / dlat) * dlat + dlat / 2
lon.grid <- round((lon.area - dlon / 2) / dlon) * dlon + dlon / 2
# convert lat or lon to string with 3 positions after the comma,
# then convert it to a string of 6 characters
# and finally convert eventual leading white spaces in zeros
lat.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", lat.grid)))
lon.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", abs(lon.grid))))
if (lon.grid < 0) {
# if the longitude is negative use 'W' (West)
kernelfilename <- paste0('SK_N', lat.str, 'W', lon.str, '.txt')
} else {
# if the longitude is positve use 'E' (East)
kernelfilename <- paste0('SK_N', lat.str, 'E', lon.str, '.txt')
}
return(data.frame(lat.grid, lon.grid, kernelfilename))
}
coords2kernelfilename(50.01, 4.9, 0.25, 0.5)
coords2kernelfilename(50, 4.9, 0.25, 0.5)
coords2kernelfilename(49.99, 4.9, 0.25, 0.5)
coords2kernelfilename(49.874, 4.9, 0.25, 0.5)
coords2kernelfilename(49.876, 4.9, 0.25, 0.5)
# some testing
lat.list <- seq(49, 51, 0.13)
lon.list <- seq(-1, 1, 0.09)
kernel.asc.path <- "D:/temp/SourceKernelsASCII/EUR/"
kernel.file.list <- list.files(path = kernel.txt.path)
for (lat in lat.list) {
for (lon in lon.list) {
kernel.filename <- coords2kernelfilename(lat, lon, 0.25, 0.5)
if (kernel.filename %in% kernel.file.list) {
print(paste(kernel.filename, 'exists'))
} else {
print(paste(kernel.filename, 'does NOT exist!!!!!'))
}
}
}
kernel.asc.path <- "D:/temp/SourceKernelsASCII/EUR/"
kernel.file.list <- list.files(path = kernel.txt.path)
kernel.asc.path <- "D:/temp/SourceKernelsASCII/EUR/"
kernel.file.list <- list.files(path = kernel.txt.path)
kernel.file.list <- list.files(path = kernel.asc.path)
for (lat in lat.list) {
for (lon in lon.list) {
kernel.filename <- coords2kernelfilename(lat, lon, 0.25, 0.5)
if (kernel.filename %in% kernel.file.list) {
print(paste(kernel.filename, 'exists'))
} else {
print(paste(kernel.filename, 'does NOT exist!!!!!'))
}
}
}
# convert to coordinates of a cell into the name of the Kernel
coords2kernelfilename <- function(lat.area, lon.area, dlat, dlon) {
# lat.area: latitude of the centre of the study area
# lon.area: longitude of the centre of the study area
# dlat: resolution of the kernel grid in N-S direction
# dlon: resolution of the kernel grid in W-E direction
# round the coordinates of the study area centre to the closest grid cell centre
lat.grid <- round((lat.area - dlat / 2) / dlat) * dlat + dlat / 2
lon.grid <- round((lon.area - dlon / 2) / dlon) * dlon + dlon / 2
# convert lat or lon to string with 3 positions after the comma,
# then convert it to a string of 6 characters
# and finally convert eventual leading white spaces in zeros
lat.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", lat.grid)))
lon.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", abs(lon.grid))))
if (lon.grid < 0) {
# if the longitude is negative use 'W' (West)
kernelfilename <- paste0('SK_N', lat.str, 'W', lon.str, '.txt')
} else {
# if the longitude is positve use 'E' (East)
kernelfilename <- paste0('SK_N', lat.str, 'E', lon.str, '.txt')
}
# return(data.frame(lat.grid, lon.grid, kernelfilename))
return(kernelfilename)
}
# some testing
lat.list <- seq(49, 51, 0.13)
lon.list <- seq(-1, 1, 0.09)
kernel.asc.path <- "D:/temp/SourceKernelsASCII/EUR/"
kernel.file.list <- list.files(path = kernel.asc.path)
for (lat in lat.list) {
for (lon in lon.list) {
kernel.filename <- coords2kernelfilename(lat, lon, 0.25, 0.5)
if (kernel.filename %in% kernel.file.list) {
print(paste(kernel.filename, 'exists'))
} else {
print(paste(kernel.filename, 'does NOT exist!!!!!'))
}
}
}
# convert to coordinates of a cell into the name of the Kernel
coords2kernelfilename <- function(lat.area, lon.area, dlat, dlon) {
# lat.area: latitude of the centre of the study area
# lon.area: longitude of the centre of the study area
# dlat: resolution of the kernel grid in N-S direction
# dlon: resolution of the kernel grid in W-E direction
# round the coordinates of the study area centre to the closest grid cell centre
lat.grid <- round((lat.area - dlat / 2) / dlat) * dlat + dlat / 2
lon.grid <- round((lon.area - dlon / 2) / dlon) * dlon + dlon / 2
# convert lat or lon to string with 3 positions after the comma,
# then convert it to a string of 6 characters
# and finally convert eventual leading white spaces in zeros
lat.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", lat.grid)))
lon.str <- sub(" ", "0", sprintf("%06s", sprintf("%.3f", abs(lon.grid))))
if (lon.grid < 0) {
# if the longitude is negative use 'W' (West)
kernelfilename <- paste0('SK_N', lat.str, 'W', lon.str, '.asc')
} else {
# if the longitude is positve use 'E' (East)
kernelfilename <- paste0('SK_N', lat.str, 'E', lon.str, '.asc')
}
# return(data.frame(lat.grid, lon.grid, kernelfilename))
return(kernelfilename)
}
# some testing
lat.list <- seq(49, 51, 0.13)
lon.list <- seq(-1, 1, 0.09)
kernel.asc.path <- "D:/temp/SourceKernelsASCII/EUR/"
kernel.file.list <- list.files(path = kernel.asc.path)
for (lat in lat.list) {
for (lon in lon.list) {
kernel.filename <- coords2kernelfilename(lat, lon, 0.25, 0.5)
if (kernel.filename %in% kernel.file.list) {
print(paste(kernel.filename, 'exists'))
} else {
print(paste(kernel.filename, 'does NOT exist!!!!!'))
}
}
}
57.5/17
57.5/17*3792
10304/3.3823
57.5/2
17/2.5
57.5/2/2.5
156/437
261/437
20/437
35.7+59.7+4.6
33/310
250/310
27/310
8.7+80.6+10.6
8.7+80.7+10.6
540*3.600
70000*.15
20*0.15
399 000*0.015
399000*0.015
399000 * 0.2 * 0.075
75000 * 0.075
0.0028/0.018
0.0028/0.018-1
(66.86+37.5)-(45+20.3)
39/1283
399000*0.03
# ----------------------------------
# baclophen trials: (placebo)effects
# ----------------------------------
library(readxl)
library(lattice)
library(ggplot2)
library(lme4)
setwd('D:/Other/ITB/')
itbdata.xlsx <- read_excel("ITB trials - data-analyse 20170831.xlsx", sheet = 1)
date.tag <- "20170831"
# ----------------------------------
# baclophen trials: (placebo)effects
# ----------------------------------
# clean up
rm(list = ls())
library(readxl)
library(lattice)
library(ggplot2)
library(lme4)
setwd('D:/Other/ITB/')
# itbdata.xlsx <- read_excel("ITB trials - data-analyse.xlsx", sheet = 1)
# itbdata.xlsx <- read_excel("Kopie van ITB trials - data-analyse (002) 13-06-17.xlsx", sheet = 1)
itbdata.xlsx <- read_excel("ITB trials - data-analyse 20170831.xlsx", sheet = 1)
date.tag <- "20170831"
itbdata.xlsx
itb.effect.2uur <- data.frame(itbdata.xlsx, TijdNaInj = 2, MAS.effect = itbdata.xlsx$MASna2uur - itbdata.xlsx$MASvoor)
head(itb.effect.2uur)
# dataset met effecten
itb.effect.2uur <- data.frame(itbdata.xlsx, TijdNaInj = 2, MAS.effect = itbdata.xlsx$MASna2uur - itbdata.xlsx$MASvoor)
itb.effect.4uur <- data.frame(itbdata.xlsx, TijdNaInj = 4, MAS.effect = itbdata.xlsx$MASna4uur - itbdata.xlsx$MASvoor)
itb.effect <- rbind(itb.effect.2uur, itb.effect.4uur)
# dosis van de vorige dag toevoegen
itb.effect <- data.frame(itb.effect, vorigeDosis = 0)
for (i in 1:NROW(itb.effect)) {
print(i)
if (itb.effect$Dag[i] > 1) {
vorige.dag <- itb.effect$Dag[i] - 1
selectie <- itb.effect$EAD.nummer == itb.effect$EAD.nummer[i] & itb.effect$Dag == vorige.dag
# rij met effect na 2 en 4 uur worden geselecteerd maar de dosis vn de vorige dag is dezelfde, vandaar mean
itb.effect$vorigeDosis[i] <- mean(itb.effect$Dosis[selectie])
}
}
head(itb.effect)
# ----------------------------------
# baclophen trials: (placebo)effects
# ----------------------------------
# clean up
rm(list = ls())
library(readxl)
library(lattice)
library(ggplot2)
library(lme4)
setwd('D:/Other/ITB/')
# itbdata.xlsx <- read_excel("ITB trials - data-analyse.xlsx", sheet = 1)
# itbdata.xlsx <- read_excel("Kopie van ITB trials - data-analyse (002) 13-06-17.xlsx", sheet = 1)
itbdata.xlsx <- read_excel("ITB trials - data-analyse 20170831.xlsx", sheet = 1)
date.tag <- "20170831"
# dataset met effecten
itb.effect.2uur <- data.frame(itbdata.xlsx, TijdNaInj = 2, MAS.effect = itbdata.xlsx$MASna2uur - itbdata.xlsx$MASvoor)
itb.effect.4uur <- data.frame(itbdata.xlsx, TijdNaInj = 4, MAS.effect = itbdata.xlsx$MASna4uur - itbdata.xlsx$MASvoor)
itb.effect <- rbind(itb.effect.2uur, itb.effect.4uur)
# dosis van de vorige dag toevoegen
itb.effect <- data.frame(itb.effect, vorigeDosis = 0)
for (i in 1:NROW(itb.effect)) {
if (itb.effect$Dag[i] > 1) {
vorige.dag <- itb.effect$Dag[i] - 1
selectie <- itb.effect$EAD.nummer == itb.effect$EAD.nummer[i] & itb.effect$Dag == vorige.dag
# rij met effect na 2 en 4 uur worden geselecteerd maar de dosis vn de vorige dag is dezelfde, vandaar mean
itb.effect$vorigeDosis[i] <- mean(itb.effect$Dosis[selectie])
}
}
# dosis van 2 dage eerder toevoegen
itb.effect <- data.frame(itb.effect, DosisEergisteren = 0)
for (i in 1:NROW(itb.effect)) {
if (itb.effect$Dag[i] > 2) {
eergisteren <- itb.effect$Dag[i] - 1
selectie <- itb.effect$EAD.nummer == itb.effect$EAD.nummer[i] & itb.effect$Dag == eergisteren
# rij met effect na 2 en 4 uur worden geselecteerd maar de dosis vn de vorige dag is dezelfde, vandaar mean
itb.effect$DosisEergisteren[i] <- mean(itb.effect$Dosis[selectie])
}
}
tiff(paste0("Overzicht_dosis_effect_per_patient_", date.tag, ".tiff"), width = 4*480, height = 8*480,
units = "px", pointsize = 12, res = 144, compression = "lzw")
p <- ggplot(data = itb.effect, aes(x = Dosis, y = MAS.effect, colour = factor(TijdNaInj))) + geom_point() + facet_wrap( ~ EAD.nummer)
p <- p  + geom_hline(aes(yintercept=0)) + stat_smooth(method = "lm") + theme_grey(base_size = 18)
p
dev.off()
unique(itb.effect$EAD.nummer)
paste0("Overzicht_dosis_effect_per_patient_", i, 'to', i+7, '_', date.tag, ".tiff")
i
i<-1
paste0("Overzicht_dosis_effect_per_patient_", i, 'to', i+7, '_', date.tag, ".tiff")
EAD.list <- unique(itb.effect$EAD.nummer)
np <- length(EAD.list)
np
# make 3 plots of 8
EAD.list <- unique(itb.effect$EAD.nummer)
np <- length(EAD.list)
for (i in seq(1, 3)) {
tiff(paste0("Overzicht_dosis_effect_per_patient_", i, 'to', i+7, '_', date.tag, ".tiff"),
width = 4*480, height = 8*480,
units = "px", pointsize = 12, res = 144, compression = "lzw")
selected.EADs <- EAD.list[(1 + (i - 1) * 8):(min(8 + (i - 1) * 8, np))]
p <- ggplot(data = itb.effect[itb.effect$EAD.nummer %in% selected.EADs],
aes(x = Dosis, y = MAS.effect, colour = factor(TijdNaInj))) + geom_point() + facet_wrap( ~ EAD.nummer)
p <- p  + geom_hline(aes(yintercept=0)) + stat_smooth(method = "lm") + theme_grey(base_size = 18)
p
dev.off()
}
selected.EADs
# make 3 plots of 8
EAD.list <- unique(itb.effect$EAD.nummer)
np <- length(EAD.list)
for (i in seq(1, 3)) {
tiff(paste0("Overzicht_dosis_effect_per_patient_", i, 'to', i+7, '_', date.tag, ".tiff"),
width = 4*480, height = 8*480,
units = "px", pointsize = 12, res = 144, compression = "lzw")
selected.EADs <- EAD.list[(1 + (i - 1) * 8):(min(8 + (i - 1) * 8, np))]
p <- ggplot(data = itb.effect[itb.effect$EAD.nummer %in% selected.EADs,],
aes(x = Dosis, y = MAS.effect, colour = factor(TijdNaInj))) + geom_point() + facet_wrap( ~ EAD.nummer)
p <- p  + geom_hline(aes(yintercept=0)) + stat_smooth(method = "lm") + theme_grey(base_size = 18)
p
dev.off()
}
# make 3 plots of 8
EAD.list <- unique(itb.effect$EAD.nummer)
np <- length(EAD.list)
for (i in seq(1, 3)) {
from.EAD <- 1 + (i - 1) * 8
to.EAD <- (min(8 + (i - 1) * 8, np))
selected.EADs <- EAD.list[from.EAD:to.EAD]
tiff(paste0("Overzicht_dosis_effect_per_patient_", from.EAD, 'to', to.EAD, '_', date.tag, ".tiff"),
width = 4*480, height = 8*480,
units = "px", pointsize = 12, res = 144, compression = "lzw")
p <- ggplot(data = itb.effect[itb.effect$EAD.nummer %in% selected.EADs,],
aes(x = Dosis, y = MAS.effect, colour = factor(TijdNaInj))) + geom_point() + facet_wrap( ~ EAD.nummer)
p <- p  + geom_hline(aes(yintercept=0)) + stat_smooth(method = "lm") + theme_grey(base_size = 18)
p
dev.off()
}
i
selected.EADs
p <- ggplot(data = itb.effect[itb.effect$EAD.nummer %in% selected.EADs,],
aes(x = Dosis, y = MAS.effect, colour = factor(TijdNaInj))) + geom_point() + facet_wrap( ~ EAD.nummer)
p <- p  + geom_hline(aes(yintercept=0)) + stat_smooth(method = "lm") + theme_grey(base_size = 18)
p
p
print(p)
dev.off()
print(p)
# make 3 plots of 8
EAD.list <- unique(itb.effect$EAD.nummer)
np <- length(EAD.list)
for (i in seq(1, 3)) {
from.EAD <- 1 + (i - 1) * 8
to.EAD <- (min(8 + (i - 1) * 8, np))
selected.EADs <- EAD.list[from.EAD:to.EAD]
tiff(paste0("Overzicht_dosis_effect_per_patient_", from.EAD, 'to', to.EAD, '_', date.tag, ".tiff"),
width = 4*480, height = 8*480,
units = "px", pointsize = 12, res = 144, compression = "lzw")
p <- ggplot(data = itb.effect[itb.effect$EAD.nummer %in% selected.EADs,],
aes(x = Dosis, y = MAS.effect, colour = factor(TijdNaInj))) + geom_point() + facet_wrap( ~ EAD.nummer)
p <- p  + geom_hline(aes(yintercept=0)) + stat_smooth(method = "lm") + theme_grey(base_size = 18)
print(p)
dev.off()
}
for (i in seq(1, 3)) {
from.EAD <- 1 + (i - 1) * 8
to.EAD <- (min(8 + (i - 1) * 8, np))
selected.EADs <- EAD.list[from.EAD:to.EAD]
tiff(paste0("Overzicht_dosis_effect_per_patient_", from.EAD, 'to', to.EAD, '_', date.tag, ".tiff"),
width = 6.5, height = 6.5,
units = "in", pointsize = 12, res = 144, compression = "lzw")
p <- ggplot(data = itb.effect[itb.effect$EAD.nummer %in% selected.EADs,],
aes(x = Dosis, y = MAS.effect, colour = factor(TijdNaInj))) + geom_point() + facet_wrap( ~ EAD.nummer)
p <- p  + geom_hline(aes(yintercept=0)) + stat_smooth(method = "lm") + theme_grey(base_size = 18)
print(p)
dev.off()
}
for (i in seq(1, 4)) {
from.EAD <- 1 + (i - 1) * 8
to.EAD <- (min(8 + (i - 1) * 8, np))
selected.EADs <- EAD.list[from.EAD:to.EAD]
tiff(paste0("Overzicht_dosis_effect_per_patient_", from.EAD, 'to', to.EAD, '_', date.tag, ".tiff"),
width = 6.5, height = 6.5,
units = "in", pointsize = 12, res = 144, compression = "lzw")
p <- ggplot(data = itb.effect[itb.effect$EAD.nummer %in% selected.EADs,],
aes(x = Dosis, y = MAS.effect, colour = factor(TijdNaInj))) + geom_point() + facet_wrap( ~ EAD.nummer)
p <- p  + geom_hline(aes(yintercept=0)) + stat_smooth(method = "lm") + theme_grey(base_size = 18)
print(p)
dev.off()
}
